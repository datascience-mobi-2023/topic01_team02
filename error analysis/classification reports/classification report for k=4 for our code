import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.neighbors import KNeighborsClassifier

train_data = pd.read_csv("../mnist_train.csv", header=None)
test_data = pd.read_csv("../mnist_test.csv", header=None)

train_labels = train_data.iloc[:, 0].to_numpy()
train_data = train_data.iloc[:, 1:]  # Remove column 0

test_labels = test_data.iloc[:, 0].to_numpy()
test_data = test_data.iloc[:, 1:]  # Remove column 0

# Z-Transform for train and test datasets
scaler = StandardScaler()
train_data_z = scaler.fit_transform(train_data)
test_data_z = scaler.transform(test_data)

# PCA for train and test datasets
pca = PCA(n_components=0.95)
train_data_pca = pca.fit_transform(train_data_z)
test_data_pca = pca.transform(test_data_z)

def knn_nearest_neighbors(train_data_pca, test_data_pca, k, train_labels, batch_size):
    result = []
    knn_classifier = KNeighborsClassifier(n_neighbors=k)
    knn_classifier.fit(train_data_pca, train_labels)

    num_test_samples = len(test_data_pca)
    num_batches = num_test_samples // batch_size

    for i in range(num_batches):
        batch_start = i * batch_size
        batch_end = (i + 1) * batch_size

        batch_result = knn_classifier.predict(test_data_pca[batch_start:batch_end])

        result.append(batch_result)

    result = np.concatenate(result)

    return result

k_value = 4
batch_size = 200

# Calculate KNN using Nearest Neighbors
result_nearest_neighbors = knn_nearest_neighbors(train_data_pca, test_data_pca, k_value, train_labels, batch_size)

# Evaluate the results
print("Confusion Matrix (KNN with Nearest Neighbors):\n", confusion_matrix(test_labels, result_nearest_neighbors))
print("Classification Report (KNN with Nearest Neighbors):\n", classification_report(test_labels, result_nearest_neighbors))
