import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from scipy import spatial
from scipy.stats import mode
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
from sklearn.neighbors import NearestNeighbors, KNeighborsClassifier
import csv
import cv2
from sklearn.svm import SVC
import seaborn as sns
from sklearn import metrics




train_data = pd.read_csv("../mnist_train.csv", header=None)
test_data = pd.read_csv("../mnist_test.csv", header=None)

train_labels = train_data.iloc[:, 0].to_numpy()
train_data = train_data.iloc[:, 1:]  # Spalte 0 entfernen

test_labels = test_data.iloc[:, 0].to_numpy()
test_data = test_data.iloc[:, 1:]  # Spalte 0 entfernen


# Z-Transform for train and test datasets
scaler = StandardScaler()
train_data_z = scaler.fit_transform(train_data)
test_data_z = scaler.transform(test_data)

# PCA for train and test datasets
pca = PCA(n_components=0.64)
train_data_pca = pca.fit_transform(train_data_z)
test_data_pca = pca.transform(test_data_z)


results = []
accuracies = []

k_values=4
batch_size = 200
result = []
result = pd.read_csv("knn_results_k_4.csv", header=0)
result = result.iloc[:, 1:]  # Spalte 0 entfernen

print("Confusion Matrix:\n", confusion_matrix(test_labels, result))

# show the confusion matrix
disp = metrics.ConfusionMatrixDisplay.from_predictions(test_labels, result)
disp.figure_.suptitle("Confusion Matrix")
print(f"Confusion matrix:\n{disp.confusion_matrix}")

plt.show()

# print the classification report
classification_report = classification_report(test_labels, result)
print("Classification Report:\n", classification_report)